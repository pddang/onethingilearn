name: Deploy to Production

on:
  push:
    branches:
      - main
env:
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  PAYLOAD_SECRET: ${{ secrets.PAYLOAD_SECRET }}
  REGISTRY: registry.digitalocean.com/learngrow
  IMAGE_NAME: learngrow
  IMAGE_TAG: latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
        postgres:
            image: postgres:15
            env:
                POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
                POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
                POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

            options: >-
                --health-cmd pg_isready
                --health-interval=10s
                --health-timeout=5s
                --health-retries=5
            ports:
                - 5432:5432
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Wait for PostgreSQL to Be Ready
        run: |
          for i in {1..60}; do
            pg_isready -h localhost -U ${{secrets.POSTGRES_USER}} && break
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Build Docker Image
        run: |
            
            docker build --build-arg PAYLOAD_SECRET=${{secrets.PAYLOAD_SECRET}} --build-arg DATABASE_URI=postgres://${{secrets.POSTGRES_USER}}:${{secrets.POSTGRES_PASSWORD}}@localhost:5432/${{secrets.POSTGRES_DB}} --network host -t $REGISTRY/$IMAGE_NAME:$IMAGE_TAG .
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
            token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600
    
      - name: Push Docker Image to digitalocean registry
        run: docker push $REGISTRY/$IMAGE_NAME:$IMAGE_TAG 

      - name: Run registry garbage collection
        run: doctl registry garbage-collection start --include-untagged-manifests --force
    
      - name: Deploy to production
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "Copying docker-compose.prod.yml to server"
            scp -r docker-compose.prod.yml ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }}:/srv
            echo "Installing digital ocean CLI..."
            cd ~
            wget https://github.com/digitalocean/doctl/releases/download/v1.119.0/doctl-1.119.0-linux-amd64.tar.gz
            tar xf ~/doctl-1.119.0-linux-amd64.tar.gz
            sudo mv ~/doctl /usr/local/bin
        
            doctl auth init --access-token ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
            cd /srv
            echo "Pulling latest image from digital ocean registry"
            docker pull $REGISTRY/$IMAGE_NAME:$IMAGE_TAG
            echo "Stopping and removing containers"
            docker-compose -f docker-compose.prod.yml down
            echo "Starting containers"
            docker-compose -f docker-compose.prod.yml up -d
            echo "Done!"
            exit
            
